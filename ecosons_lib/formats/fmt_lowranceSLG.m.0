%Reads a single-beam Lowrance sonar file into memory
% [P HS PS]=fmt_lowranceSLG(fname)
% P{}: channel cells with ping matrices: rows: ping no., columns: echo sample
% HS: channel cells with transducer headers
% PS: GPS + time data (time=-1: no data)
% fname: RAW file filename
function [P,HS,PS]=fmt_lowranceSLG(fname)

 %Initialize returned values
 P=[];
 HS=struct;
 PS=struct;
  lPS=gpsLowrance(NaN,NaN, NaN);

 %file time
 s=stat(fname);
 ftime=localtime(s.mtime);

 %open file
 sonarFile=fopen(fname, 'rb');

 %compute file length
 fseek(sonarFile,0,"eof");
 sonarFileSize=ftell(sonarFile);
 fseek(sonarFile,0,"bof");

 %channel number?
 nchan=fread(sonarFile, 1, "int32");

 %block size
 blksz=fread(sonarFile, 1, "uint8")+...
       256*fread(sonarFile, 1, "uint8")+...
       65536*fread(sonarFile, 1, "uint8");
 
 %compression scheme (only schem=0 is currently read)
 schem=fread(sonarFile, 1, "uint8");

 %number of pings in the file
 npings=floor(sonarFileSize/blksz);

 %reserve space
 P=zeros(npings, blksz-3*4);
 
 X=NaN;
 Y=NaN;
 T=0;
 temperature=0;
 soundSpeed=1500;
 T0=(ftime.hour+ftime.min/60+ftime.sec/3600+ftime.usec/3600e+6);
 
 %read pings
 for n=1:npings
 
  %field bitmask
  vmask=fread(sonarFile, 1, "uint32");

  lowerLimit=0.3048*fread(sonarFile, 1, "float32");
  depth=0.3048*fread(sonarFile, 1, "float32");
  
  hdrsz=3*4;

  %not used
  if( bitand(vmask, 0x00800000 ) )
   hdrsz=hdrsz+4;
   waterSpeed=0.514444*fread(sonarFile,1,"float32");
  else
   waterSpeed=NaN;
  endif

  %GPS coordinates
  if( bitand(vmask, 0x01000000 ) )
   hdrsz=hdrsz+4;
   Y=fread(sonarFile,1,"uint32");
  endif
  if( bitand(vmask, 0x02000000 ) )
   hdrsz=hdrsz+4;
   X=fread(sonarFile,1,"uint32");
  endif
  
  %not used
  if( bitand(vmask, 0x04000000 ) )
   hdrsz=hdrsz+4;
   surfaceDepth=0.3048*fread(sonarFile, 1, "float32");
  endif
  if( bitand(vmask, 0x08000000 ) )
   hdrsz=hdrsz+4;
   topOfBottomDepth=0.3048*fread(sonarFile, 1, "float32");
  endif
  
  %time in milliseconds
  if( bitand(vmask, 0x20000000 ) )
   hdrsz=hdrsz+4;
   T=1e-3*fread(sonarFile, 1, "int32");
  endif  
  
  %not used
  if( bitand(vmask, 0x10000000 ) )
   hdrsz=hdrsz+4;
   unk1=fread(sonarFile,1,"uint32");
  endif

  %load ping
  if( schem == 0 )
   P(n, 1:(blksz-hdrsz))=fread(sonarFile, blksz-hdrsz, "uint8");
  else
   %fseek(f, blksz-hdrsz, "cof");
   %P(n, 1:(blksz-hdrsz))=nan(1,blksz-hdrsz);
   P(n, 1:(blksz-hdrsz))=fread(sonarFile, blksz-hdrsz, "uint8");
  endif

  %assume data is right
  binLength=lowerLimit/(soundSpeed*(blksz-hdrsz));

  %create structure
  samp=struct;
   samp.channel=nchan;
   samp.frequency=50e+3; %¿?
   samp.transmitPower=1;
   samp.sampleInterval=binLength;
   samp.pulseLength=4*binLength;
   samp.soundVelocity=soundSpeed;
   samp.absorptionCoefficient=0.0;
   samp.temperature=temperature;
   samp.count=n;

  HS(n)=samp;
  GS(n)=gpsLowrance(X,Y,T);

 endfor

 %set time in hours
 T0=T0-GS(end).time/3600;
 for n=1:npings
  GS(n).time=GS(n).time/3600+T0;
 endfor

 %return data as cell
 P={ P };
 HS={ HS };

endfunction


function lPS=gpsLowrance(X,Y,T)
 Sm=6356752.3142; %radio terrestre
 dg=180/pi;

 lPS.time=-1.0;
 lPS.latitude=0.0;
 lPS.longitude=0.0;

 X=bitand(0x00FFFFFF,X);
 if( bitand(0x008000,X) )
  X=X-256**3;
 endif

 Y=bitand(0x00FFFFFF,Y);
 if( bitand(0x008000,Y) )
  Y=Y-256**3;
 endif

 lPS.latitude=dg*(2*atan(exp(Y/Sm))-pi/2); %ningún significado xeométrico
 lPS.longitude=dg*X/Sm; %ningún significado xeométrico (tampouco) con lóxica
 lPS.time=T/1000;
endfunction

